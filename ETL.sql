CREATE DATABASE IF NOT EXISTS DOLPHIN_MOVIELENS_DB;
USE DATABASE DOLPHIN_MOVIELENS_DB;
CREATE SCHEMA IF NOT EXISTS STAGING;
USE SCHEMA DOLPHIN_MOVIELENS_DB.STAGING;

-- CREATE OR REPLACE STAGE my_stage FILE_FORMAT = (TYPE = 'CSV' FIELD_OPTIONALLY_ENCLOSED_BY = '"');
-- AFTER do not forget to upload our CSV files to this STAGE!!!!


--------------------------------------------------
-- [E]xtract

 
-- Raw Movies table
CREATE OR REPLACE TABLE movies_staging (
    movie_id INT,
    movie_title STRING, 
    release_date timestamp,
    video_release_date timestamp,
    imdb_url STRING,
    genre_unknown INT,
    genre_action INT, 
    genre_adventure INT, 
    genre_animation INT, 
    genre_childrens INT, 
    genre_comedy INT, 
    genre_crime INT, 
    genre_documentary INT, 
    genre_drama INT, 
    genre_fantasy INT, 
    genre_noir INT, 
    genre_horror INT, 
    genre_musical INT, 
    genre_mystery INT, 
    genre_romance INT, 
    genre_scifi INT, 
    genre_thriller INT, 
    genre_war INT, 
    genre_western INT 
);

-- Make sure that the table is clear before loading the data
TRUNCATE TABLE movies_staging;
COPY INTO movies_staging
FROM @my_stage/movies.csv
FILE_FORMAT = (TYPE = 'CSV' FIELD_DELIMITER = '|' FIELD_OPTIONALLY_ENCLOSED_BY = '"' SKIP_HEADER = 0)
ON_ERROR = 'CONTINUE';

----------------------------------------------------
-- Raw Ratings table
CREATE OR REPLACE TABLE ratings_staging (
    user_id INT,
    movie_id INT, 
    rating INT,
    rating_date timestamp
);

TRUNCATE TABLE ratings_staging;
COPY INTO ratings_staging
FROM @my_stage/ratings.csv
FILE_FORMAT = (TYPE = 'CSV' FIELD_DELIMITER = '\t' FIELD_OPTIONALLY_ENCLOSED_BY = '"' SKIP_HEADER = 0)
ON_ERROR = 'CONTINUE';

----------------------------------------------------
-- Raw Occupation table
CREATE OR REPLACE TABLE occupations_staging (
    occupation_id INT,
    occupation VARCHAR(15)
);

TRUNCATE TABLE occupations_staging;
COPY INTO occupations_staging
FROM @my_stage/occupations.csv
FILE_FORMAT = (TYPE = 'CSV' FIELD_DELIMITER = ',' FIELD_OPTIONALLY_ENCLOSED_BY = '"' SKIP_HEADER = 0)
ON_ERROR = 'CONTINUE';
    
----------------------------------------------------
-- Raw Users table
CREATE OR REPLACE TABLE users_staging (
    user_id INT,
    age INT,
    gender VARCHAR(1),
    occupation INT,
    zip_code VARCHAR(5)
);

TRUNCATE TABLE users_staging;
COPY INTO users_staging
FROM @my_stage/users.csv
FILE_FORMAT = (TYPE = 'CSV' FIELD_DELIMITER = '|' FIELD_OPTIONALLY_ENCLOSED_BY = '"' SKIP_HEADER = 0)
ON_ERROR = 'CONTINUE';

----------------------------------------------------
--  [T]ransform & [L]oad

CREATE OR REPLACE TABLE public.dim_users AS
SELECT DISTINCT
    u.user_id,
    u.gender,
    u.age,
    CASE 
        WHEN u.age < 16 THEN '0-15'
        WHEN u.age BETWEEN 16 AND 19 THEN '16-19'
        WHEN u.age BETWEEN 20 AND 29 THEN '20-29'
        WHEN u.age BETWEEN 30 AND 39 THEN '30-39'
        WHEN u.age BETWEEN 40 AND 49 THEN '40-49'
        WHEN u.age BETWEEN 50 AND 59 THEN '50-59'
        WHEN u.age >= 60 THEN '60+'
        ELSE 'Unknown'
    END AS age_group,
    o.occupation
FROM staging.users_staging u
JOIN staging.occupations_staging o ON u.occupation = o.occupation_id;

CREATE OR REPLACE TABLE public.dim_movies AS
SELECT DISTINCT
    MOVIE_ID AS ID,
    MOVIE_TITLE AS TITLE,          
    RELEASE_DATE AS RELEASED, 
    GENRE_ACTION,
    GENRE_ADVENTURE,
    GENRE_ANIMATION,
    GENRE_CHILDRENS,
    GENRE_COMEDY,
    GENRE_CRIME,
    GENRE_DOCUMENTARY,
    GENRE_DRAMA,
    GENRE_FANTASY,
    GENRE_NOIR,
    GENRE_HORROR,
    GENRE_MUSICAL,
    GENRE_MYSTERY,
    GENRE_ROMANCE,
    GENRE_SCIFI,
    GENRE_THRILLER,
    GENRE_WAR,
    GENRE_WESTERN
FROM staging.movies_staging;

CREATE OR REPLACE TABLE public.FACT_RATINGS AS
SELECT 
    r.user_id,
    r.movie_id,   
    r.rating,                   
    r.rating_date
FROM staging.RATINGS_STAGING r;


CREATE OR REPLACE VIEW PUBLIC.RATINGS_BY_GENRE_VIEW AS
SELECT 
    GENRE_NAME, 
    AVG_RATING,
    CNT_RATING 
FROM (
    SELECT 'Action'      AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_ACTION = 1 UNION ALL
    SELECT 'Adventure'   AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_ADVENTURE = 1 UNION ALL
    SELECT 'Animation'   AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_ANIMATION = 1 UNION ALL
    SELECT 'Children'    AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_CHILDRENS = 1 UNION ALL
    SELECT 'Comedy'      AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_COMEDY = 1 UNION ALL
    SELECT 'Crime'       AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_CRIME = 1 UNION ALL
    SELECT 'Documentary' AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_DOCUMENTARY = 1 UNION ALL
    SELECT 'Drama'       AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_DRAMA = 1 UNION ALL
    SELECT 'Fantasy'     AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_FANTASY = 1 UNION ALL
    SELECT 'FilmNoir,'   AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_NOIR = 1 UNION ALL
    SELECT 'Horror'      AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_HORROR = 1 UNION ALL
    SELECT 'Musical'     AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_MUSICAL = 1 UNION ALL
    SELECT 'Mystery'     AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_MYSTERY = 1 UNION ALL
    SELECT 'Romance'     AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_ROMANCE = 1 UNION ALL
    SELECT 'SciFi,'      AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_SCIFI = 1 UNION ALL
    SELECT 'Thriller'    AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_THRILLER = 1 UNION ALL
    SELECT 'War'         AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_WAR = 1 UNION ALL
    SELECT 'Western'     AS GENRE_NAME, AVG(RATING) AS AVG_RATING, COUNT(RATING) AS CNT_RATING FROM FACT_RATINGS FR JOIN DIM_MOVIES DM ON FR.MOVIE_ID = DM.ID AND DM.GENRE_WESTERN = 1
)
ORDER BY GENRE_NAME;


-- Cleanup stagging
DROP TABLE IF EXISTS staging.ratings_staging;
DROP TABLE IF EXISTS staging.movies_staging;
DROP TABLE IF EXISTS staging.users_staging;
DROP TABLE IF EXISTS staging.occupations_staging;

